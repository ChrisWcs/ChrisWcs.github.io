{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["styles","column","display","flexDirection","justifyContent","alignItems","background","marginTop","padding","border","row","icon","height","width","margin","title","fontFamily","fontSize","color","subTitle","App","react_default","a","createElement","style","href","src","alt","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"qKAEMA,EAAS,CACbC,OAAQ,CACNC,QAAS,OACTC,cAAe,SACfC,eAAgB,SAChBC,WAAY,SACZC,WAAY,UACZC,UAAW,OACXC,QAAS,OACTC,OAAQ,mBAEVC,IAAK,CACHR,QAAS,OACTC,cAAe,MACfC,eAAgB,UAElBO,KAAM,CACJC,OAAQ,OACRC,MAAO,OACPC,OAAQ,QAEVC,MAAO,CACLC,WAAY,QACZC,SAAU,OACVH,OAAQ,OACRI,MAAO,WAETC,SAAU,CACRL,OAAQ,OACRE,WAAY,QACZC,SAAU,OACVC,MAAO,YAqBIE,EAjBH,kBACVC,EAAAC,EAAAC,cAAA,OAAKC,MAAOxB,EAAOU,KACjBW,EAAAC,EAAAC,cAAA,OAAKC,MAAOxB,EAAOC,QACjBoB,EAAAC,EAAAC,cAAA,MAAIC,MAAOxB,EAAOe,OAAlB,oBACAM,EAAAC,EAAAC,cAAA,MAAIC,MAAOxB,EAAOmB,UAAlB,sBACAE,EAAAC,EAAAC,cAAA,OAAKC,MAAOxB,EAAOU,KACjBW,EAAAC,EAAAC,cAAA,KAAGE,KAAK,+BACNJ,EAAAC,EAAAC,cAAA,OAAKC,MAAOxB,EAAOW,KAAMe,IAAI,mBAAmBC,IAAI,YAEtDN,EAAAC,EAAAC,cAAA,KAAGE,KAAK,gCACNJ,EAAAC,EAAAC,cAAA,OAAKC,MAAOxB,EAAOW,KAAMe,IAAI,mBAAmBC,IAAI,gBCnC1CC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCbNC,IAASC,OAAOb,EAAAC,EAAAC,cAACY,EAAD,MAASC,SAASC,eAAe,SD4H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.1d332e33.chunk.js","sourcesContent":["import React from 'react';\n\nconst styles = {\n  column: {\n    display: \"flex\",\n    flexDirection: \"column\",\n    justifyContent: \"center\",\n    alignItems: \"center\",\n    background: \"#FAFAFA\",\n    marginTop: \"30px\",\n    padding: \"20px\",\n    border: \"solid 1px black\",\n  },\n  row: {\n    display: \"flex\",\n    flexDirection: \"row\",\n    justifyContent: \"center\",\n  },\n  icon: {\n    height: \"75px\",\n    width: \"75px\",\n    margin: \"10px\",\n  },\n  title: {\n    fontFamily: \"Arial\",\n    fontSize: \"50px\",\n    margin: \"10px\",\n    color: \"#212121\",\n  },\n  subTitle: {\n    margin: \"10px\",\n    fontFamily: \"Arial\",\n    fontSize: \"30px\",\n    color: \"#616161\",\n  }\n}\n\nconst App = () => (\n  <div style={styles.row}>\n    <div style={styles.column}>\n      <h1 style={styles.title}>Christian Hansen</h1>\n      <h3 style={styles.subTitle}>Software Developer</h3>\n      <div style={styles.row}>\n        <a href=\"https://github.com/ChrisWcs\">\n          <img style={styles.icon} src=\"./githublogo.png\" alt=\"Github\"/>\n        </a>\n        <a href=\"https://medium.com/@cswcsdcs\">\n          <img style={styles.icon} src=\"./mediumlogo.png\" alt=\"Medium\"/>\n        </a>\n      </div>\n    </div>\n  </div>\n);\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}